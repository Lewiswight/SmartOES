## Configuration file for the XBee GPIO Client device driver.

## Usage**
#  ====================================================================
#
#  1. Create bin/dia.zip by changing to the installation directory for
#     Dia, and typing on the command line
#
#        python make.py demos/rabbit/gpio/gpio.yml
#
#     You will need to have a version of Python 2.4.3 installed
#     (http://www.python.org/download/releases/2.4.3/).
#
#  2. Upload dia.py, bin/dia.zip and demos/rabbit/gpio/gpio.yml to the
#     ConnectPort (under the "Applications > Python" link in the left-side
#     menu of the ConnectPort's web page).
#
#  3. Compile and run the Dynamic C sample
#     Samples\iDigi\BL4S100\gpio_endpoint.c on your BL4S100.
#     This demo also works with the files gpio_custom_control.c,
#     gpio_rabbitweb.c, and gpio_solar_farm.c, in the same directory.
#
#  4. Run this demo on the ConnectPort (telnet: python dia.py gpio.yml)
#
# **  More detailed instructions are given in the Dynamic C sample files.
#
# About this demo:
#
#   The XBeeGPIOClient driver creates channels based upon the results of a
#   GPIO discovery query to the BL4S100.  The settings are documented
#   below.
#


devices:

  # Instantiate an XBee Device Manager instance.
  #
  # A single instance of the XBee Device Manager is required when using any
  # XBee device drivers on the Dia.  The XBee Device Manager is responsible
  # for multiplexing data communications and managing node configurations.
  #
  - name: xbee_device_manager
    driver: devices.xbee.xbee_device_manager.xbee_device_manager:XBeeDeviceManager

  # Instantiate the GPIO device instance:
  - name: gpio

    driver: devices.rabbit.xbee_gpio_client:XBeeGPIOClient
    settings:
        # Note: the xbee_device_manager setting is being set to
        # "xbee_device_manager", which is the name of the instance of the
        # XBeeDeviceManager, above.
        xbee_device_manager: "xbee_device_manager"

        # Change the below extended_address setting to match the 64-bit
        # hardware address of the radio installed in your development
        # board:
        extended_address: "00:13:a2:00:40:0a:00:c0!"

        # Optional poll rate (in seconds).  Do not set (or set to 0) if
        # the GPIO server is pushing data.
        poll_rate: 0


presentations:
   
  # The standard Dia command-line console
  - name: console0
    driver: presentations.console.console:Console
    settings:
        type: tcp
        port: 4146

  # Use the web presentation that auto-updates the displayed
  # values every 'polling' seconds.  If polling is 0, no auto-update
  # occurs.
  - name: web0
    driver: presentations.web.web:Web
    settings:
        page: idigi_dia.html
        polling: 1
        title: "BL4S100 GPIO Demo"

  # The RCI presentation for ConnectWare.
  - name: rci0
    driver: presentations.rci.rci_handler:RCIHandler
    settings:
        port: 8080

